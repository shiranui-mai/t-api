// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/proto/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	src/proto/api.proto

It has these top-level messages:
	HeartbeatReq
	HeartbeatRes
	ApiHeader
	ApiTracePoint
	ApiCallReq
	ApiCallRes
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the heartbeat.
type HeartbeatReq struct {
}

func (m *HeartbeatReq) Reset()                    { *m = HeartbeatReq{} }
func (m *HeartbeatReq) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatReq) ProtoMessage()               {}
func (*HeartbeatReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HeartbeatRes struct {
}

func (m *HeartbeatRes) Reset()                    { *m = HeartbeatRes{} }
func (m *HeartbeatRes) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRes) ProtoMessage()               {}
func (*HeartbeatRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The request message containing the Api call.
type ApiHeader struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Uid     int64  `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Service string `protobuf:"bytes,3,opt,name=service" json:"service,omitempty"`
	Method  string `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
}

func (m *ApiHeader) Reset()                    { *m = ApiHeader{} }
func (m *ApiHeader) String() string            { return proto.CompactTextString(m) }
func (*ApiHeader) ProtoMessage()               {}
func (*ApiHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ApiHeader) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ApiHeader) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ApiHeader) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ApiHeader) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

type ApiTracePoint struct {
	TraceId   string `protobuf:"bytes,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Cost      int32  `protobuf:"varint,3,opt,name=cost" json:"cost,omitempty"`
	Method    string `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
	Content   string `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
}

func (m *ApiTracePoint) Reset()                    { *m = ApiTracePoint{} }
func (m *ApiTracePoint) String() string            { return proto.CompactTextString(m) }
func (*ApiTracePoint) ProtoMessage()               {}
func (*ApiTracePoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ApiTracePoint) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *ApiTracePoint) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ApiTracePoint) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *ApiTracePoint) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *ApiTracePoint) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ApiCallReq struct {
	Header  *ApiHeader     `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Tp      *ApiTracePoint `protobuf:"bytes,2,opt,name=tp" json:"tp,omitempty"`
	Payload string         `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
}

func (m *ApiCallReq) Reset()                    { *m = ApiCallReq{} }
func (m *ApiCallReq) String() string            { return proto.CompactTextString(m) }
func (*ApiCallReq) ProtoMessage()               {}
func (*ApiCallReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ApiCallReq) GetHeader() *ApiHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ApiCallReq) GetTp() *ApiTracePoint {
	if m != nil {
		return m.Tp
	}
	return nil
}

func (m *ApiCallReq) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type ApiCallRes struct {
	Code   int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	Res    string `protobuf:"bytes,3,opt,name=res" json:"res,omitempty"`
}

func (m *ApiCallRes) Reset()                    { *m = ApiCallRes{} }
func (m *ApiCallRes) String() string            { return proto.CompactTextString(m) }
func (*ApiCallRes) ProtoMessage()               {}
func (*ApiCallRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ApiCallRes) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ApiCallRes) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *ApiCallRes) GetRes() string {
	if m != nil {
		return m.Res
	}
	return ""
}

func init() {
	proto.RegisterType((*HeartbeatReq)(nil), "api.heartbeat_req")
	proto.RegisterType((*HeartbeatRes)(nil), "api.heartbeat_res")
	proto.RegisterType((*ApiHeader)(nil), "api.api_header")
	proto.RegisterType((*ApiTracePoint)(nil), "api.api_trace_point")
	proto.RegisterType((*ApiCallReq)(nil), "api.api_call_req")
	proto.RegisterType((*ApiCallRes)(nil), "api.api_call_res")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiServer service

type ApiServerClient interface {
	// Sends a greeting
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatRes, error)
	Kcall(ctx context.Context, in *ApiCallReq, opts ...grpc.CallOption) (*ApiCallRes, error)
}

type apiServerClient struct {
	cc *grpc.ClientConn
}

func NewApiServerClient(cc *grpc.ClientConn) ApiServerClient {
	return &apiServerClient{cc}
}

func (c *apiServerClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatRes, error) {
	out := new(HeartbeatRes)
	err := grpc.Invoke(ctx, "/api.ApiServer/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServerClient) Kcall(ctx context.Context, in *ApiCallReq, opts ...grpc.CallOption) (*ApiCallRes, error) {
	out := new(ApiCallRes)
	err := grpc.Invoke(ctx, "/api.ApiServer/Kcall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiServer service

type ApiServerServer interface {
	// Sends a greeting
	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatRes, error)
	Kcall(context.Context, *ApiCallReq) (*ApiCallRes, error)
}

func RegisterApiServerServer(s *grpc.Server, srv ApiServerServer) {
	s.RegisterService(&_ApiServer_serviceDesc, srv)
}

func _ApiServer_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiServer/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiServer_Kcall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerServer).Kcall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiServer/Kcall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerServer).Kcall(ctx, req.(*ApiCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ApiServer",
	HandlerType: (*ApiServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _ApiServer_Heartbeat_Handler,
		},
		{
			MethodName: "Kcall",
			Handler:    _ApiServer_Kcall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/api.proto",
}

func init() { proto.RegisterFile("src/proto/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6e, 0xe2, 0x30,
	0x10, 0x86, 0x09, 0x81, 0xb0, 0x19, 0x76, 0xc5, 0xee, 0xec, 0x6a, 0x9b, 0xa2, 0x1e, 0x50, 0x54,
	0xa9, 0x9c, 0x40, 0xa2, 0xea, 0x03, 0xf4, 0xd6, 0xaa, 0xe2, 0x92, 0x3e, 0x40, 0x64, 0xe2, 0x11,
	0xb8, 0x22, 0xb1, 0x6b, 0xbb, 0x54, 0x7d, 0x8b, 0x3e, 0x72, 0x65, 0x27, 0x81, 0x52, 0xd4, 0xdb,
	0xfc, 0xe3, 0x91, 0xbf, 0x7f, 0x7e, 0x1b, 0xfe, 0x1a, 0x5d, 0xcc, 0x95, 0x96, 0x56, 0xce, 0x99,
	0x12, 0x33, 0x5f, 0x61, 0xc8, 0x94, 0x48, 0x47, 0xf0, 0x6b, 0x43, 0x4c, 0xdb, 0x15, 0x31, 0x9b,
	0x6b, 0x7a, 0xfe, 0xda, 0x30, 0xe9, 0x13, 0x00, 0x53, 0x22, 0xdf, 0x10, 0xe3, 0xa4, 0x31, 0x81,
	0xc1, 0x8e, 0xb4, 0x11, 0xb2, 0x4a, 0x82, 0x49, 0x30, 0x8d, 0xb3, 0x56, 0xe2, 0x6f, 0x08, 0x5f,
	0x04, 0x4f, 0xba, 0x93, 0x60, 0x1a, 0x66, 0xae, 0x74, 0xb3, 0x86, 0xf4, 0x4e, 0x14, 0x94, 0x84,
	0xf5, 0x6c, 0x23, 0xf1, 0x3f, 0x44, 0x25, 0xd9, 0x8d, 0xe4, 0x49, 0xcf, 0x1f, 0x34, 0x2a, 0x7d,
	0x0f, 0x60, 0xe4, 0x60, 0x56, 0xb3, 0x82, 0x72, 0x25, 0x45, 0x65, 0xf1, 0x1c, 0x7e, 0xd4, 0x52,
	0xf0, 0x16, 0xe9, 0xf5, 0x3d, 0xc7, 0x0b, 0x88, 0xad, 0x28, 0xc9, 0x58, 0x56, 0x2a, 0x0f, 0xee,
	0x65, 0x87, 0x06, 0x22, 0xf4, 0x0a, 0x69, 0xac, 0x67, 0xf7, 0x33, 0x5f, 0x7f, 0x07, 0x76, 0x56,
	0x0b, 0x59, 0x59, 0xaa, 0x6c, 0xd2, 0xaf, 0x19, 0x8d, 0x4c, 0x5f, 0xe1, 0xa7, 0x73, 0x54, 0xb0,
	0xed, 0xd6, 0xe5, 0x83, 0x57, 0x10, 0xd5, 0x51, 0x78, 0x33, 0xc3, 0xc5, 0x68, 0xe6, 0x12, 0x3d,
	0x24, 0x94, 0x35, 0xc7, 0x78, 0x09, 0x5d, 0x5b, 0xbb, 0x1a, 0x2e, 0xfe, 0xed, 0x87, 0x3e, 0x6d,
	0x96, 0x75, 0xad, 0x72, 0x60, 0xc5, 0xde, 0xb6, 0x92, 0xf1, 0x36, 0xa3, 0x46, 0xa6, 0xcb, 0x23,
	0xb0, 0xa9, 0xd7, 0xe1, 0xe4, 0xb1, 0x7e, 0x1d, 0x4e, 0x78, 0x06, 0x03, 0xd2, 0x3a, 0x2f, 0xcd,
	0xda, 0x83, 0xe2, 0x2c, 0x22, 0xad, 0x97, 0x66, 0xed, 0x1e, 0x43, 0x93, 0x69, 0xae, 0x74, 0xe5,
	0xc2, 0x40, 0x7c, 0xab, 0xc4, 0x23, 0xe9, 0x1d, 0x69, 0xbc, 0x81, 0xf8, 0xae, 0x7d, 0x64, 0x44,
	0x6f, 0xee, 0xe8, 0x17, 0x8c, 0x4f, 0x7b, 0x26, 0xed, 0xe0, 0x1c, 0xfa, 0x0f, 0xce, 0x0f, 0xfe,
	0xd9, 0xef, 0xd3, 0xe6, 0x32, 0x3e, 0x69, 0x99, 0xb4, 0xb3, 0x8a, 0xfc, 0x4f, 0xbb, 0xfe, 0x08,
	0x00, 0x00, 0xff, 0xff, 0xd8, 0xbf, 0x54, 0xa7, 0x80, 0x02, 0x00, 0x00,
}
